{
	// a few publicly accessible functions
	getters: `{

		// check if the token is whitelisted
		$is_allowed_token = ($symbol) => {
			$allowed_tokens = ["ETH", "USDC"]; // we can change this list
			length(filter($allowed_tokens, 20, $t => $t == $symbol)) == 1
		};

		// convert the donated amount to bytes
		$asset_to_base = ($asset, $amount) => {
			$oracle_address = "JPQKPRI5FMTQRJF4ZZMYZYDQVRD55OTC"; // livenet
		//	$oracle_address = "F4KHJUCLJKY4JV7M5F754LAJX4EB7M4N"; // testnet
			$token_registry = "O6H6ZIFI57X3PLTYHOCVYPP5A553CYFQ";

			if ($asset == 'base') {
				$amount_in_base = $amount;
			} else {  
				$symbol = var[$token_registry]['a2s_' || $asset];

				if ($symbol AND $is_allowed_token($symbol)) {

					$current_desc = var[$token_registry]['current_desc_' || $asset];

					if ($current_desc) {
						$decimals = var[$token_registry]['decimals_' || $current_desc] OTHERWISE 0;
					} else {
						$decimals = 0;
					}

					$feed_name = $symbol || "_USD";

					$rate = data_feed[[oracles=$oracle_address, feed_name=$feed_name, ifnone=false]] / data_feed[[oracles=$oracle_address, feed_name="GBYTE_USD", ifnone=false]];

					$amount_in_base = floor(($amount / 10 ^ $decimals) * $rate * 1e9);
				} else {
					$amount_in_base = 0;
				}
			}

			$amount_in_base
		};
	}`,

	// initialization script
	init: `{
		$cascading_donations_aa = "D3B42CWMY3A6I6GHC6KUJJSUKOCBE77U"; // livenet
	//	$cascading_donations_aa = "ARJGCY7F33YB2HONUYQJ2FH6JK2AUJDM"; // testnet
		$repository = "byteball/ocore"; // your repository here

		$asset = var['asset'];
		$supply = var['supply'];
	}`,

	// our outputs
	messages: {
		cases: [
			// create asset
			{
				if: `{ trigger.data.define AND !$asset }`,
				messages: [
					{
						app: 'asset',
						payload: {
							// without cap
							is_private: false,
							is_transferrable: true,
							auto_destroy: false,
							fixed_denominations: false,
							issued_by_definer_only: true,
							cosigned_by_definer: false,
							spender_attested: false,
						}
					},
					{
						app: 'state',
						state: `{
							var['asset'] = response_unit;
							var['supply'] = 0;
							response['asset'] = response_unit;
						}`
					}
				]
			},

			// Receive notifications from the Cascading Donations AA.
			//
			// Received data:
			// repo: the repo that has just received a donation (should be ours)
			// donor: donor's address
			// amount: donated amount (integer, in smallest indivisible units)
			// asset: the asset the donation was received in ('base' for bytes, base64-string for other assets)
			//
			// Here we reward the donor with newly issued tokens. The amount is the same as the donation amount if the donation was in bytes, otherwise the equivalent according to the current exchange rate.
			{
				if: `{ $asset AND trigger.address == $cascading_donations_aa AND exists(trigger.data.repo) AND trigger.data.repo == $repository AND is_valid_address(trigger.data.donor) AND trigger.data.amount AND trigger.data.asset }`,
				init: `{
					$amount = $asset_to_base(trigger.data.asset, trigger.data.amount);
				}`,
				messages: [
					{
						app: 'payment',
						payload: {
							asset: `{ $asset }`,
							outputs: [
								{ address: "{ trigger.data.donor }", amount: "{ $amount }"},
							]
						}
					},
					{
						app: 'state',
						state: `{
							var['supply'] += $amount;
							var['rating*' || trigger.data.donor] += $amount;
							var['rating*' || trigger.data.repo || "*" || trigger.data.donor] += $amount;

							response['message'] = "Thank you for your donation!";
						}`
					}
				]
			}
		]
	}
}